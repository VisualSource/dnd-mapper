/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StageEditorImport } from './routes/stage-editor'
import { Route as EntityEditorImport } from './routes/entity-editor'
import { Route as DisplayEditorImport } from './routes/display-editor'
import { Route as DisplayImport } from './routes/display'
import { Route as IndexImport } from './routes/index'
import { Route as StageEditorIndexImport } from './routes/stage-editor/index'
import { Route as StageEditorNewImport } from './routes/stage-editor/new'
import { Route as StageEditorIdImport } from './routes/stage-editor/$id'
import { Route as ControlIdImport } from './routes/control.$id'

// Create/Update Routes

const StageEditorRoute = StageEditorImport.update({
  path: '/stage-editor',
  getParentRoute: () => rootRoute,
} as any)

const EntityEditorRoute = EntityEditorImport.update({
  path: '/entity-editor',
  getParentRoute: () => rootRoute,
} as any)

const DisplayEditorRoute = DisplayEditorImport.update({
  path: '/display-editor',
  getParentRoute: () => rootRoute,
} as any)

const DisplayRoute = DisplayImport.update({
  path: '/display',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StageEditorIndexRoute = StageEditorIndexImport.update({
  path: '/',
  getParentRoute: () => StageEditorRoute,
} as any)

const StageEditorNewRoute = StageEditorNewImport.update({
  path: '/new',
  getParentRoute: () => StageEditorRoute,
} as any)

const StageEditorIdRoute = StageEditorIdImport.update({
  path: '/$id',
  getParentRoute: () => StageEditorRoute,
} as any)

const ControlIdRoute = ControlIdImport.update({
  path: '/control/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/display': {
      id: '/display'
      path: '/display'
      fullPath: '/display'
      preLoaderRoute: typeof DisplayImport
      parentRoute: typeof rootRoute
    }
    '/display-editor': {
      id: '/display-editor'
      path: '/display-editor'
      fullPath: '/display-editor'
      preLoaderRoute: typeof DisplayEditorImport
      parentRoute: typeof rootRoute
    }
    '/entity-editor': {
      id: '/entity-editor'
      path: '/entity-editor'
      fullPath: '/entity-editor'
      preLoaderRoute: typeof EntityEditorImport
      parentRoute: typeof rootRoute
    }
    '/stage-editor': {
      id: '/stage-editor'
      path: '/stage-editor'
      fullPath: '/stage-editor'
      preLoaderRoute: typeof StageEditorImport
      parentRoute: typeof rootRoute
    }
    '/control/$id': {
      id: '/control/$id'
      path: '/control/$id'
      fullPath: '/control/$id'
      preLoaderRoute: typeof ControlIdImport
      parentRoute: typeof rootRoute
    }
    '/stage-editor/$id': {
      id: '/stage-editor/$id'
      path: '/$id'
      fullPath: '/stage-editor/$id'
      preLoaderRoute: typeof StageEditorIdImport
      parentRoute: typeof StageEditorImport
    }
    '/stage-editor/new': {
      id: '/stage-editor/new'
      path: '/new'
      fullPath: '/stage-editor/new'
      preLoaderRoute: typeof StageEditorNewImport
      parentRoute: typeof StageEditorImport
    }
    '/stage-editor/': {
      id: '/stage-editor/'
      path: '/'
      fullPath: '/stage-editor/'
      preLoaderRoute: typeof StageEditorIndexImport
      parentRoute: typeof StageEditorImport
    }
  }
}

// Create and export the route tree

interface StageEditorRouteChildren {
  StageEditorIdRoute: typeof StageEditorIdRoute
  StageEditorNewRoute: typeof StageEditorNewRoute
  StageEditorIndexRoute: typeof StageEditorIndexRoute
}

const StageEditorRouteChildren: StageEditorRouteChildren = {
  StageEditorIdRoute: StageEditorIdRoute,
  StageEditorNewRoute: StageEditorNewRoute,
  StageEditorIndexRoute: StageEditorIndexRoute,
}

const StageEditorRouteWithChildren = StageEditorRoute._addFileChildren(
  StageEditorRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/display': typeof DisplayRoute
  '/display-editor': typeof DisplayEditorRoute
  '/entity-editor': typeof EntityEditorRoute
  '/stage-editor': typeof StageEditorRouteWithChildren
  '/control/$id': typeof ControlIdRoute
  '/stage-editor/$id': typeof StageEditorIdRoute
  '/stage-editor/new': typeof StageEditorNewRoute
  '/stage-editor/': typeof StageEditorIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/display': typeof DisplayRoute
  '/display-editor': typeof DisplayEditorRoute
  '/entity-editor': typeof EntityEditorRoute
  '/control/$id': typeof ControlIdRoute
  '/stage-editor/$id': typeof StageEditorIdRoute
  '/stage-editor/new': typeof StageEditorNewRoute
  '/stage-editor': typeof StageEditorIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/display': typeof DisplayRoute
  '/display-editor': typeof DisplayEditorRoute
  '/entity-editor': typeof EntityEditorRoute
  '/stage-editor': typeof StageEditorRouteWithChildren
  '/control/$id': typeof ControlIdRoute
  '/stage-editor/$id': typeof StageEditorIdRoute
  '/stage-editor/new': typeof StageEditorNewRoute
  '/stage-editor/': typeof StageEditorIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/display'
    | '/display-editor'
    | '/entity-editor'
    | '/stage-editor'
    | '/control/$id'
    | '/stage-editor/$id'
    | '/stage-editor/new'
    | '/stage-editor/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/display'
    | '/display-editor'
    | '/entity-editor'
    | '/control/$id'
    | '/stage-editor/$id'
    | '/stage-editor/new'
    | '/stage-editor'
  id:
    | '__root__'
    | '/'
    | '/display'
    | '/display-editor'
    | '/entity-editor'
    | '/stage-editor'
    | '/control/$id'
    | '/stage-editor/$id'
    | '/stage-editor/new'
    | '/stage-editor/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DisplayRoute: typeof DisplayRoute
  DisplayEditorRoute: typeof DisplayEditorRoute
  EntityEditorRoute: typeof EntityEditorRoute
  StageEditorRoute: typeof StageEditorRouteWithChildren
  ControlIdRoute: typeof ControlIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DisplayRoute: DisplayRoute,
  DisplayEditorRoute: DisplayEditorRoute,
  EntityEditorRoute: EntityEditorRoute,
  StageEditorRoute: StageEditorRouteWithChildren,
  ControlIdRoute: ControlIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/display",
        "/display-editor",
        "/entity-editor",
        "/stage-editor",
        "/control/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/display": {
      "filePath": "display.tsx"
    },
    "/display-editor": {
      "filePath": "display-editor.tsx"
    },
    "/entity-editor": {
      "filePath": "entity-editor.tsx"
    },
    "/stage-editor": {
      "filePath": "stage-editor.tsx",
      "children": [
        "/stage-editor/$id",
        "/stage-editor/new",
        "/stage-editor/"
      ]
    },
    "/control/$id": {
      "filePath": "control.$id.tsx"
    },
    "/stage-editor/$id": {
      "filePath": "stage-editor/$id.tsx",
      "parent": "/stage-editor"
    },
    "/stage-editor/new": {
      "filePath": "stage-editor/new.tsx",
      "parent": "/stage-editor"
    },
    "/stage-editor/": {
      "filePath": "stage-editor/index.tsx",
      "parent": "/stage-editor"
    }
  }
}
ROUTE_MANIFEST_END */
